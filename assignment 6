train_iter = iterators.SerialIterator(train, batch_size=100, shuffle=True)
test_iter = iterators.SerialIterator(test, batch_size=100, repeat=False, shuffle=False)

class CNN(Chain):
    def __init__(self):
        super(CNN, self).__init__()
        with self.init_scope():
            self.conv1 = L.Convolution2D(
                in_channels=1, out_channels=10, ksize=4, stride=1)
            self.l3 = L.Linear(None, 84)
            self.l4 = L.Linear(84, 10)

    def __call__(self, x):
        h = F.relu(self.conv1(x))
        h = F.max_pooling_2d(h, 2, 2)
        h = F.relu(self.l3(h))
        if chainer.config.train:
            return self.l4(h)
        return F.relu(self.l4(h))
        
# Your CNN, including output
### Add your code here. ###
model = L.Classifier(CNN())  # the input size, 784, is inferred
optimizer = optimizers.SGD(lr=0.01)
optimizer.setup(model)

updater = training.StandardUpdater(train_iter, optimizer)
trainer = training.Trainer(updater, (1, 'epoch'), out='cnn_output_folder')

trainer.extend(extensions.Evaluator(test_iter, model))
trainer.extend(extensions.LogReport())
trainer.extend(extensions.PrintReport(['epoch', 'main/accuracy', 'validation/main/accuracy']))
trainer.extend(extensions.ProgressBar())
trainer.extend(extensions.PlotReport(['main/loss', 'validation/main/loss'], file_name='cnn_loss.png'))
trainer.extend(extensions.PlotReport(['main/accuracy', 'validation/main/accuracy'], file_name='cnn_accuracy.png'))
trainer.run()

